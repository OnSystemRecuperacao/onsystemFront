{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport Utils from \"src/app/utils/utils\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let OcorrenciaService = /*#__PURE__*/(() => {\n  class OcorrenciaService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.data = {};\n      this.BASE_URL = Utils.makeURLRequest(\"/ocorrencias\");\n      // Headers\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    read() {\n      let dados = this.httpClient.get(this.BASE_URL, this.httpOptions).toPromise();\n      console.log(dados);\n      //return this.httpClient.get<any>(this.BASE_URL).pipe(retry(2), catchError(this.handleError))\n      return this.httpClient.get(this.BASE_URL, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    readByCliente(idCliente) {\n      const url = `${this.BASE_URL}/listarPorCliente/${idCliente}`;\n      return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    readById(idOcorrencia) {\n      const url = `${this.BASE_URL}/${idOcorrencia}`;\n      return this.httpClient.get(url, this.httpOptions).toPromise();\n    }\n    create(ocorrencia) {\n      this.data = this.parseData(ocorrencia);\n      return this.httpClient.post(this.BASE_URL, this.data, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    encerrarOcorrencia(obs, idOcorrencia) {\n      const url = `${this.BASE_URL}/encerrarOcorrenciaCliente/${idOcorrencia}`;\n      console.log(url);\n      return this.httpClient.put(url, this.httpOptions).toPromise();\n    }\n    delete(id) {\n      const url = `${this.BASE_URL}/${id}`;\n      console.log(url);\n      return this.httpClient.delete(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    // Manipulação de erros\n    handleError(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = error.message;\n      }\n      return throwError(errorMessage);\n    }\n    parseData(ocorrencia) {\n      let data = ocorrencia;\n      console.log(JSON.parse(JSON.stringify(data)));\n      return data;\n    }\n  }\n  OcorrenciaService.ɵfac = function OcorrenciaService_Factory(t) {\n    return new (t || OcorrenciaService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  OcorrenciaService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OcorrenciaService,\n    factory: OcorrenciaService.ɵfac,\n    providedIn: 'root'\n  });\n  return OcorrenciaService;\n})();","map":null,"metadata":{},"sourceType":"module"}