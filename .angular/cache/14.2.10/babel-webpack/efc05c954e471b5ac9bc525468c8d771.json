{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { NavigationEnum } from '../model/enums/navigation.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth/auth.service\";\nimport * as i2 from \"../services/commons/common.service\";\nexport class NotAuthenticatedError {}\nexport let AuthHttpInterceptor = /*#__PURE__*/(() => {\n  class AuthHttpInterceptor {\n    constructor(auth, commomService) {\n      this.auth = auth;\n      this.commomService = commomService;\n    }\n    intercept(req, next) {\n      if (!req.url.includes('/oauth/token') && this.auth.isAccessTokenInvalido()) {\n        console.log(\"Acesso não autorizado, realizando logoff\");\n        localStorage.setItem(\"access_token\", \"\");\n        this.commomService.navigateByUrl(NavigationEnum.NAO_AUTORIZADO);\n      }\n      return next.handle(req);\n    }\n  }\n  AuthHttpInterceptor.ɵfac = function AuthHttpInterceptor_Factory(t) {\n    return new (t || AuthHttpInterceptor)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.CommomService));\n  };\n  AuthHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthHttpInterceptor,\n    factory: AuthHttpInterceptor.ɵfac\n  });\n  return AuthHttpInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}