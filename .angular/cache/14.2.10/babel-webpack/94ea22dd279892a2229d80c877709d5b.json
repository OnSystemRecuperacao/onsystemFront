{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport Utils from \"src/app/utils/utils\";\nimport { throwError } from 'rxjs';\nimport { catchError } from \"rxjs/operators\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UsuarioService = /*#__PURE__*/(() => {\n  class UsuarioService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      // Headers\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      this.BASE_URL = Utils.makeURLRequest(\"/usuarios\");\n    }\n    create(usuario) {\n      console.log(usuario);\n      return this.httpClient.post(this.BASE_URL, usuario, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    read(idTenancy) {\n      const url = `${this.BASE_URL}/${idTenancy}`;\n      return this.httpClient.get(url, this.httpOptions).toPromise();\n    }\n    readByID(idTenancy, idUsuario) {\n      const url = `${this.BASE_URL}/${idTenancy}/${idUsuario}`;\n      return this.httpClient.get(url, this.httpOptions).toPromise();\n    }\n    updateUserStatus(usuario) {\n      console.log(usuario);\n      const url = `${this.BASE_URL}/${usuario.id}`;\n      return this.httpClient.patch(url, usuario, this.httpOptions).toPromise();\n    }\n    delete(id) {\n      const url = `${this.BASE_URL}/${id}`;\n      console.log(url);\n      return this.httpClient.delete(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    esqueciSenha(dto) {\n      const url = `${environment.baseUrl}/senhaUsuario/esqueciSenha`;\n      return this.httpClient.post(url, dto, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    validaSenhaAdm(login) {\n      const url = `${this.BASE_URL}/validaSenha`;\n      console.log(url);\n      return this.httpClient.post(url, login, this.httpOptions).toPromise();\n    }\n    // Manipulação de erros\n    handleError(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = error.error;\n      }\n      return throwError(errorMessage);\n    }\n  }\n  UsuarioService.ɵfac = function UsuarioService_Factory(t) {\n    return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  UsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuarioService,\n    factory: UsuarioService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuarioService;\n})();","map":null,"metadata":{},"sourceType":"module"}