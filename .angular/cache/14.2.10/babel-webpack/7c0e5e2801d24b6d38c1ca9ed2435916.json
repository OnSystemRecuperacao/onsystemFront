{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport Utils from 'src/app/utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(httpClient, jwtHelper) {\n      this.httpClient = httpClient;\n      this.jwtHelper = jwtHelper;\n      this.BASE_URL = Utils.makeURLRequest(\"/oauth/token\");\n      // Headers\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/x-www-form-urlencoded',\n          'Authorization': 'Basic b25zeXN0ZW0tY2xpZW50Om9uc3lzdGVtQHJlY3VwZXJhY29lcw=='\n        })\n      };\n      this.loadToken();\n    }\n    isAccessTokenInvalido() {\n      const token = localStorage.getItem(\"access_token\");\n      return !token || this.jwtHelper.isTokenExpired(token);\n    }\n    obterNovoAccessToken() {\n      const body = 'grant_type=refresh_token';\n      return this.httpClient.post(this.BASE_URL, body, this.httpOptions).toPromise().then(response => {\n        console.log(response);\n        this.decodeToken(response['access_token']);\n        return Promise.resolve();\n      }).catch(response => {\n        console.log(response);\n        return Promise.resolve();\n      });\n    }\n    login(login) {\n      const data = `username=${login.email}&password=${login.senha}&grant_type=password`;\n      return this.httpClient.post(this.BASE_URL, data, this.httpOptions).toPromise().then(response => {\n        this.decodeToken(response['access_token']);\n      }).catch(response => {\n        if (response.status === 400) {\n          if (response[\"error\"].error === \"invalid_grant\") {\n            return Promise.reject(\"Usuário ou senha Inválidos !!\");\n          }\n        }\n        if (response.status === 0) {\n          return Promise.reject(\"Erro de comunicação com o servidor!!\");\n        }\n        return Promise.reject(response);\n      });\n    }\n    jwtIsLoad() {\n      return localStorage.getItem(\"access_token\") != null;\n    }\n    getUsuarioLogado() {\n      let token = localStorage.getItem(\"access_token\");\n      let payload = {};\n      if (token) {\n        this.decodeToken(token);\n        payload = this.jwtPayload;\n      }\n      return payload;\n    }\n    possuiPermissaoAcesso(roles) {\n      for (const role of roles) {\n        if (this.verificaPermissao(role)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    verificaPermissao(role) {\n      return this.jwtPayload && this.jwtPayload[\"tipo_tenancy\"].descricao == role;\n    }\n    decodeToken(token) {\n      this.jwtPayload = this.jwtHelper.decodeToken(token);\n      localStorage.setItem(\"access_token\", token);\n      localStorage.setItem(\"id_usuario\", this.jwtPayload[\"id_usuario\"]);\n    }\n    loadToken() {\n      let token = localStorage.getItem(\"access_token\");\n      if (token) {\n        this.decodeToken(token);\n      }\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}