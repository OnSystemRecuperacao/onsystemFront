{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { NavigationEnum } from 'src/app/model/enums/navigation.enum';\nimport Utils from 'src/app/utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nexport let CommomService = /*#__PURE__*/(() => {\n  class CommomService {\n    constructor(router, httpClient) {\n      this.router = router;\n      this.httpClient = httpClient;\n      this.ocorrencia = new BehaviorSubject(\"\");\n      this.BASE_URL = Utils.makeURLRequest(\"/commons\");\n      // Headers\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    setNovaOcorrencia(oco) {\n      this.ocorrencia.next(oco);\n    }\n    getNovaOcorrencia() {\n      return this.ocorrencia.asObservable();\n    }\n    buscaCep(cep) {\n      const url = `${this.BASE_URL}/buscarCep/${cep}`;\n      return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    getListaBancos() {\n      const url = `../../../assets/listaBancos.json`;\n      return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    reloadComponent() {\n      let currentUrl = this.router.url;\n      this.router.routeReuseStrategy.shouldReuseRoute = () => false;\n      this.router.onSameUrlNavigation = 'reload';\n      this.router.navigate([currentUrl]);\n    }\n    getRoute() {\n      return this.router.url;\n    }\n    navigate(path) {\n      this.router.navigate([path]);\n    }\n    navigateByUrl(url) {\n      this.router.navigateByUrl(url);\n    }\n    navigateWithParams(path, param) {\n      this.router.navigate([path, param]);\n    }\n    getMenuOptions(codigoTipoTencancy) {\n      return this.loadMenuItensByTenancy(codigoTipoTencancy);\n    }\n    getUserMenuOptions() {\n      return this.loadUserMenuItens();\n    }\n    loadMenuItensByTenancy(codigoTipoTencancy) {\n      let menu = [];\n      if (codigoTipoTencancy == 0 || codigoTipoTencancy == 1) {\n        menu = this.loadMenuItensFull();\n      } else {\n        menu = this.loadMenuItensClienteOrPrestadores();\n      }\n      return menu;\n    }\n    loadMenuItensFull() {\n      return [{\n        label: 'Dashboard',\n        icon: 'pi pi-fw pi-chart-line',\n        routerLink: [NavigationEnum.DASHBOARD]\n      }, {\n        label: 'Ocorrências',\n        icon: 'pi pi-fw pi-map-marker',\n        items: [{\n          label: 'Novo',\n          icon: 'pi pi-fw pi-plus',\n          routerLink: [NavigationEnum.NOVA_OCORRENCIA]\n        }, {\n          label: 'Listar Ocorrências',\n          icon: 'pi pi-fw pi-list',\n          routerLink: [NavigationEnum.LISTAR_OCORRENCIAS]\n        }]\n      }, {\n        label: 'Clientes',\n        icon: 'pi pi-fw pi-users',\n        items: [{\n          label: 'Novo',\n          icon: 'pi pi-fw pi-plus',\n          routerLink: [NavigationEnum.ADICIONAR_CLIENTES]\n        }, {\n          label: 'Listar Clientes',\n          icon: 'pi pi-fw pi-list',\n          routerLink: [NavigationEnum.LISTAR_CLIENTES]\n        }]\n      }, {\n        label: 'Prestadores',\n        icon: 'pi pi-fw pi-id-card',\n        items: [{\n          label: 'Novo',\n          icon: 'pi pi-fw pi-plus',\n          routerLink: [NavigationEnum.ADICIONAR_PRESTADORES]\n        }, {\n          label: 'Listar Prestadores',\n          icon: 'pi pi-fw pi-list',\n          routerLink: [NavigationEnum.LISTAR_PRESTADORES]\n        }, {\n          label: 'Aprovações',\n          icon: 'pi pi-fw pi-check-circle',\n          routerLink: [NavigationEnum.LISTAR_PRESTADORES_INATIVOS]\n        }]\n      }, {\n        label: 'Usuários',\n        icon: 'pi pi-fw pi-user',\n        items: [{\n          label: 'Novo',\n          icon: 'pi pi-fw pi-plus',\n          routerLink: [NavigationEnum.ADICIONAR_USUARIOS]\n        }, {\n          label: 'Listar Usuários',\n          icon: 'pi pi-fw pi-list',\n          routerLink: [NavigationEnum.LISTAR_USUARIOS]\n        }]\n      }];\n    }\n    loadMenuItensClienteOrPrestadores() {\n      return [{\n        label: 'Dashboard',\n        icon: 'pi pi-fw pi-chart-line',\n        routerLink: [NavigationEnum.DASHBOARD]\n      }, {\n        label: 'Ocorrências',\n        icon: 'pi pi-fw pi-map-marker',\n        items: [{\n          label: 'Novo',\n          icon: 'pi pi-fw pi-plus',\n          routerLink: [NavigationEnum.NOVA_OCORRENCIA]\n        }, {\n          label: 'Listar Ocorrências',\n          icon: 'pi pi-fw pi-list',\n          routerLink: [NavigationEnum.LISTAR_OCORRENCIAS]\n        }]\n      }, {\n        label: 'Usuários',\n        icon: 'pi pi-fw pi-user',\n        items: [\n        // {\n        //    label:'Novo',\n        //    icon:'pi pi-fw pi-plus',\n        //    routerLink: [NavigationEnum.ADICIONAR_USUARIOS]\n        // },\n        {\n          label: 'Listar Usuários',\n          icon: 'pi pi-fw pi-list',\n          routerLink: [NavigationEnum.LISTAR_USUARIOS]\n        }]\n      }];\n    }\n    loadUserMenuItens() {\n      return [{\n        label: 'Meus Dados',\n        icon: 'pi pi-fw pi-user-edit',\n        command: () => {\n          this.navigateWithParams(NavigationEnum.EDITAR_USUARIOS, localStorage.getItem(\"id_usuario\"));\n        }\n      }, {\n        label: 'Logoff',\n        icon: 'pi pi-fw pi-power-off',\n        command: () => {\n          this.logout();\n        }\n      }];\n    }\n    logout() {\n      localStorage.removeItem(\"access_token\");\n      this.navigate(NavigationEnum.LOGIN);\n    }\n    // Manipulação de erros\n    handleError(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = error.message;\n      }\n      return throwError(errorMessage);\n    }\n  }\n  CommomService.ɵfac = function CommomService_Factory(t) {\n    return new (t || CommomService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n  };\n  CommomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommomService,\n    factory: CommomService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommomService;\n})();","map":null,"metadata":{},"sourceType":"module"}