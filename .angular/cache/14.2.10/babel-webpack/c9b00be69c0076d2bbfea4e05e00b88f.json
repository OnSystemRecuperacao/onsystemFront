{"ast":null,"code":"import { ConfirmationService, MessageService } from 'primeng/api';\nimport { NavigationEnum } from 'src/app/model/enums/navigation.enum';\nimport MessageUtils from 'src/app/utils/message-util';\nimport { Tenancy } from 'src/app/model/vo/tenancy';\nimport { finalize } from 'rxjs/operators';\nimport { getDatabase, onChildAdded, push, ref } from 'firebase/database';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"primeng/api\";\nimport * as i2 from \"src/app/services/localizacaoPrestador/localizacaoPrestador-service\";\nimport * as i3 from \"src/app/services/notificacao/notificacao-service\";\nimport * as i4 from \"src/app/services/commons/common.service\";\nimport * as i5 from \"primeng/dynamicdialog\";\nimport * as i6 from \"primeng/button\";\nimport * as i7 from \"primeng/messages\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"primeng/confirmdialog\";\nimport * as i10 from \"primeng/table\";\nfunction AceiteOcorrenciasComponent_ng_template_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h6\", 9);\n    i0.ɵɵtext(2, \"Notificamos o prestador, aguarde at\\u00E9 1 minuto para resposta.\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AceiteOcorrenciasComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h5\", 7);\n    i0.ɵɵtext(2, \"Selecione um prestador para sua ocorrencia\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(3, AceiteOcorrenciasComponent_ng_template_2_div_3_Template, 3, 0, \"div\", 8);\n    i0.ɵɵelement(4, \"p-messages\");\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.mensagemInfo);\n  }\n}\nfunction AceiteOcorrenciasComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"th\", 10);\n    i0.ɵɵtext(2, \"Nome Prestador\");\n    i0.ɵɵelement(3, \"p-sortIcon\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"th\", 12);\n    i0.ɵɵtext(5, \"Tempo\");\n    i0.ɵɵelement(6, \"p-sortIcon\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"th\", 14);\n    i0.ɵɵtext(8, \"Situa\\u00E7\\u00E3o\");\n    i0.ɵɵelement(9, \"p-sortIcon\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\", 16);\n    i0.ɵɵtext(11, \"Selecionar\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AceiteOcorrenciasComponent_4_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\", 16);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 16);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 16);\n    i0.ɵɵtext(6, \"Aguardando\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\", 16)(8, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function AceiteOcorrenciasComponent_4_ng_template_0_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r8);\n      const tempoPrestadorOcorrencia_r6 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.aprovar(tempoPrestadorOcorrencia_r6));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const tempoPrestadorOcorrencia_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tempoPrestadorOcorrencia_r6.localizacao.tenancy.nome);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(tempoPrestadorOcorrencia_r6 == null ? null : tempoPrestadorOcorrencia_r6.tempoTexto);\n  }\n}\nfunction AceiteOcorrenciasComponent_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, AceiteOcorrenciasComponent_4_ng_template_0_Template, 9, 2, \"ng-template\", 17);\n  }\n}\nconst _c0 = function () {\n  return {\n    width: \"50vw\"\n  };\n};\nexport let AceiteOcorrenciasComponent = /*#__PURE__*/(() => {\n  class AceiteOcorrenciasComponent {\n    constructor(messageService, localizacaoPrestadorService, notificacaoService, commomService, dialogService, ref, config, confirmationService) {\n      this.messageService = messageService;\n      this.localizacaoPrestadorService = localizacaoPrestadorService;\n      this.notificacaoService = notificacaoService;\n      this.commomService = commomService;\n      this.dialogService = dialogService;\n      this.ref = ref;\n      this.config = config;\n      this.confirmationService = confirmationService;\n      this.dialog = false;\n      this.prestador = {};\n      this.prestadores = [];\n      this.tempoPrestadorOcorrencia = {};\n      this.tempoPrestadorOcorrencias = [];\n      this.ocorrencia = {};\n      this.notificacao = {};\n      this.pre = {};\n      this.loading = true;\n      this.mensagemInfo = false;\n      this.aceiteOcorrencia = false;\n    }\n    ngOnInit() {\n      console.log(this.config.data);\n      this.buscarPrestadores();\n    }\n    buscarPrestadores() {\n      this.ocorrencia = this.config.data.novaOcorrencia;\n      console.log(this.config.data);\n      const dados = {\n        idOcorrencia: this.config.data.idOcorrencia,\n        prestadores: this.config.data.prestadores,\n        estados: this.config.data.estados\n      };\n      this.localizacaoPrestadorService.buscarPrestadorLocalizacao(dados).then(response => {\n        this.tempoPrestadorOcorrencias = response;\n        console.log(this.tempoPrestadorOcorrencias);\n        this.loading = false;\n        console.log(this.config.data.prestadores != null);\n        if (this.config.data.prestadores != null) {\n          this.messageService.add(MessageUtils.onWarningMessage(\"Caso algum prestador selicionado não esteja na lista, o mesmo não esta com os dados atualizados na base.\"));\n        }\n      }).catch(error => this.messageService.add(MessageUtils.onErrorMessage(error)));\n    }\n    aprovar(tempo) {\n      this.tempoPrestadorOcorrencia = {};\n      this.ocorrencia = {};\n      this.pre = {};\n      this.tempoPrestadorOcorrencia = tempo;\n      this.pre.id = this.tempoPrestadorOcorrencia.localizacao?.prestador?.id;\n      this.ocorrencia.id = this.config.data.idOcorrencia;\n      this.notificacao.prestador = new Tenancy(tempo.idPrestador);\n      this.notificacao.ocorrencia = this.ocorrencia;\n      console.log(this.notificacao);\n      this.notificacaoService.notificarPrestador(this.notificacao).pipe(finalize(() => {\n        setTimeout(() => {\n          this.verificarControleAceite(this.callback, this.notificacao.ocorrencia?.id);\n        }, 29000);\n      })).subscribe(response => {\n        // this.tempoPrestadorOcorrencias = response; \n        if (response) {\n          console.log(this.tempoPrestadorOcorrencias);\n          this.loading = false;\n          this.gravarControleAceite(this.notificacao);\n          this.mensagemInfo = true;\n          this.messageService.add(MessageUtils.onInfoMessage(\"Prestador notificado, aguardando resposta\"));\n        }\n      }, error => this.messageService.add(MessageUtils.onErrorMessage(\"Não foi possivel notificar esse prestador, por favor, escolha outro.\")));\n      // this.ref.close();\n      // this.commomService.navigateByUrl(NavigationEnum.LISTAR_OCORRENCIAS)\n    }\n\n    redirectToList(event) {\n      this.commomService.navigateByUrl(NavigationEnum.LISTAR_OCORRENCIAS);\n    }\n    gravarControleAceite(oco) {\n      let controleAceite = 'controleAceite - ' + oco.ocorrencia?.id;\n      const db = getDatabase();\n      push(ref(db, controleAceite), {\n        id: oco.ocorrencia?.id,\n        aceito: 0\n      });\n    }\n    verificarControleAceite(callback, id) {\n      const db = getDatabase();\n      let controleAceite = 'controleAceite - ' + id;\n      const commentsRef = ref(db, controleAceite);\n      let retorno = {\n        id: 0,\n        aceito: false\n      };\n      onChildAdded(commentsRef, data => {\n        retorno = callback(this.parse(data));\n        console.log(\"DEPOIS DO BACK\");\n        console.log(retorno);\n      });\n      setTimeout(() => {\n        console.log(\"Aceite\");\n        console.log(retorno.aceito);\n        if (retorno.aceito) {\n          this.confirm(id);\n        } else {\n          this.messageService.add(MessageUtils.onWarningMessage(\"Prestador não respondeu, por favor, escolha outro.\"));\n        }\n      }, 1000);\n    }\n    callback(data) {\n      let retorno = {\n        id: data.id,\n        aceito: data.aceito == 0 ? false : true\n      };\n      console.log(\"CALLBACK\");\n      console.log(retorno);\n      return retorno;\n    }\n    parse(snapshot) {\n      const {\n        id,\n        aceito\n      } = snapshot.val();\n      const {\n        key: _id\n      } = snapshot;\n      const message = {\n        id,\n        aceito\n      };\n      return message;\n    }\n    confirm(id) {\n      this.confirmationService.confirm({\n        message: 'Ocorrencia aceita pelo prestador, você será encaminhado para tela de interação.',\n        header: 'Ocorrencia iniciada',\n        icon: 'pi pi-exclamation-triangle',\n        accept: () => {\n          let teste = this.ocorrencia.idCentral;\n          this.commomService.setNovaOcorrencia(teste);\n          this.ref.close();\n          this.commomService.navigateWithParams(NavigationEnum.VISUALIZAR_OCORRENCIA, id);\n        }\n      });\n    }\n  }\n  AceiteOcorrenciasComponent.ɵfac = function AceiteOcorrenciasComponent_Factory(t) {\n    return new (t || AceiteOcorrenciasComponent)(i0.ɵɵdirectiveInject(i1.MessageService), i0.ɵɵdirectiveInject(i2.LocalizacaoPrestadorService), i0.ɵɵdirectiveInject(i3.NotificacaoService), i0.ɵɵdirectiveInject(i4.CommomService), i0.ɵɵdirectiveInject(i5.DialogService), i0.ɵɵdirectiveInject(i5.DynamicDialogRef), i0.ɵɵdirectiveInject(i5.DynamicDialogConfig), i0.ɵɵdirectiveInject(i1.ConfirmationService));\n  };\n  AceiteOcorrenciasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AceiteOcorrenciasComponent,\n    selectors: [[\"app-ocorrencias\"]],\n    features: [i0.ɵɵProvidersFeature([MessageService, ConfirmationService])],\n    decls: 6,\n    vars: 10,\n    consts: [[\"dataKey\", \"id\", 3, \"value\", \"rows\", \"rowHover\", \"loading\"], [\"dt\", \"\"], [\"pTemplate\", \"caption\"], [\"pTemplate\", \"header\"], [4, \"ngIf\"], [\"acceptLabel\", \"OK\", 3, \"baseZIndex\", \"rejectVisible\"], [1, \"p-d-flex\", \"p-ai-center\", \"p-jc-between\"], [1, \"p-m-0\"], [\"class\", \"p-d-flex p-ai-center p-jc-between\", 4, \"ngIf\"], [1, \"p-m-0\", 2, \"color\", \"red\"], [\"pSortableColumn\", \"id\", 2, \"text-align\", \"center\"], [\"field\", \"id\"], [\"pSortableColumn\", \"status\", 2, \"text-align\", \"center\"], [\"field\", \"processo\"], [\"pSortableColumn\", \"nome\", 2, \"text-align\", \"center\"], [\"field\", \"status\"], [2, \"text-align\", \"center\"], [\"pTemplate\", \"body\"], [\"pButton\", \"\", \"pRipple\", \"\", \"icon\", \"pi pi-check\", 1, \"p-button-rounded\", \"p-button-success\", \"p-mr-2\", 3, \"click\"]],\n    template: function AceiteOcorrenciasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p-table\", 0, 1);\n        i0.ɵɵtemplate(2, AceiteOcorrenciasComponent_ng_template_2_Template, 5, 1, \"ng-template\", 2);\n        i0.ɵɵtemplate(3, AceiteOcorrenciasComponent_ng_template_3_Template, 12, 0, \"ng-template\", 3);\n        i0.ɵɵtemplate(4, AceiteOcorrenciasComponent_4_Template, 1, 0, null, 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"p-confirmDialog\", 5);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"value\", ctx.tempoPrestadorOcorrencias)(\"rows\", 3)(\"rowHover\", true)(\"loading\", ctx.loading);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", !ctx.tempoPrestadorOcorrencias.length);\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleMap(i0.ɵɵpureFunction0(9, _c0));\n        i0.ɵɵproperty(\"baseZIndex\", 10000)(\"rejectVisible\", false);\n      }\n    },\n    dependencies: [i1.PrimeTemplate, i6.ButtonDirective, i7.Messages, i8.NgIf, i9.ConfirmDialog, i10.Table, i10.SortableColumn, i10.SortIcon],\n    encapsulation: 2\n  });\n  return AceiteOcorrenciasComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}