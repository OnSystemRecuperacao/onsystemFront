{"ast":null,"code":"import { AlignmentType, Document, HeadingLevel, Paragraph, TabStopPosition, TabStopType, TextRun } from \"docx\";\nexport class DocumentCreator {\n  // tslint:disable-next-line: typedef\n  create(idOcorrencia, data, observacoes, numeroProcesso, cliente, motivo, prestador, detalhes) {\n    const document = new Document({\n      sections: [{\n        children: [new Paragraph({\n          text: \"Relatório da ocorrencia \" + idOcorrencia,\n          alignment: AlignmentType.CENTER,\n          heading: HeadingLevel.HEADING_1\n        }), this.createContactInfo(cliente, numeroProcesso, prestador, motivo, detalhes), this.createHeading(\"Chat da ocorrencia\"), ...data.map(data => {\n          const arr = [];\n          arr.push(this.createInstitutionHeader(data.user.name));\n          if (data.user.tipoTenancy === 3) {\n            prestador = data.user.name;\n          }\n          // if (data.image !== \"\") {\n          //     var sliceSize = 512;\n          //     var byteArrays:any = [];\n          //     arr.push(new Paragraph({\n          //         children: [\n          //             new ImageRun({\n          //                 data: data.bufferImagem,\n          //                 transformation: {\n          //                     width: 50,\n          //                     height: 50,\n          //                 },\n          //             }),\n          //         ],\n          //     }))\n          // }\n          const bulletPoints = this.splitParagraphIntoBullets(data.text);\n          bulletPoints.forEach(bulletPoint => {\n            arr.push(this.createBullet(bulletPoint));\n          });\n          arr.push(this.createRoleText('---------------------------------------------------------------'));\n          return arr;\n        }).reduce((prev, curr) => prev.concat(curr), []), this.createHeading(\"Observações da central Onsystem\"), new Paragraph({\n          children: [new TextRun({\n            text: observacoes,\n            italics: true\n          })]\n        })]\n      }]\n    });\n    return document;\n  }\n  createContactInfo(cliente, numeroProcesso, prestador, motivo, detalhes) {\n    return new Paragraph({\n      alignment: AlignmentType.LEFT,\n      children: [new TextRun(`Cliente : ${cliente}`), new TextRun({\n        text: `Numero Processo: ${numeroProcesso}`,\n        break: 1\n      }), new TextRun({\n        text: `Prestador responsavel: ${prestador}`,\n        break: 1\n      }), new TextRun({\n        text: `Motivo da ocorrência: ${motivo}`,\n        break: 1\n      }), new TextRun({\n        text: `Detalhes da ocorrência: ${detalhes}`,\n        break: 1\n      })]\n    });\n  }\n  createHeading(text) {\n    return new Paragraph({\n      text: text,\n      heading: HeadingLevel.HEADING_1,\n      thematicBreak: true\n    });\n  }\n  createSubHeading(text) {\n    return new Paragraph({\n      text: text,\n      heading: HeadingLevel.HEADING_2\n    });\n  }\n  createInstitutionHeader(institutionName) {\n    return new Paragraph({\n      tabStops: [{\n        type: TabStopType.RIGHT,\n        position: TabStopPosition.MAX\n      }],\n      children: [new TextRun({\n        text: institutionName,\n        bold: true\n      })]\n    });\n  }\n  createRoleText(roleText) {\n    return new Paragraph({\n      children: [new TextRun({\n        text: roleText,\n        italics: true\n      })]\n    });\n  }\n  createBullet(text) {\n    return new Paragraph({\n      children: [new TextRun({\n        text: text\n      })]\n    });\n  }\n  // tslint:disable-next-line:no-any\n  createSkillList(skills) {\n    return new Paragraph({\n      children: [new TextRun(skills.map(skill => skill.name).join(\", \") + \".\")]\n    });\n  }\n  // tslint:disable-next-line:no-any\n  createAchivementsList(achivements) {\n    return achivements.map(achievement => new Paragraph({\n      text: achievement.name,\n      bullet: {\n        level: 0\n      }\n    }));\n  }\n  createInterests(interests) {\n    return new Paragraph({\n      children: [new TextRun(interests)]\n    });\n  }\n  splitParagraphIntoBullets(text) {\n    return text.split(\"\\n\\n\");\n  }\n  // tslint:disable-next-line:no-any\n  createPositionDateText(startDate, endDate, isCurrent) {\n    const startDateText = this.getMonthFromInt(startDate.month) + \". \" + startDate.year;\n    const endDateText = isCurrent ? \"Present\" : `${this.getMonthFromInt(endDate.month)}. ${endDate.year}`;\n    return `${startDateText} - ${endDateText}`;\n  }\n  getMonthFromInt(value) {\n    switch (value) {\n      case 1:\n        return \"Jan\";\n      case 2:\n        return \"Feb\";\n      case 3:\n        return \"Mar\";\n      case 4:\n        return \"Apr\";\n      case 5:\n        return \"May\";\n      case 6:\n        return \"Jun\";\n      case 7:\n        return \"Jul\";\n      case 8:\n        return \"Aug\";\n      case 9:\n        return \"Sept\";\n      case 10:\n        return \"Oct\";\n      case 11:\n        return \"Nov\";\n      case 12:\n        return \"Dec\";\n      default:\n        return \"N/A\";\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}