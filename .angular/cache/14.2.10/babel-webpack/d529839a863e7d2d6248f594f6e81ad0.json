{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport Utils from 'src/app/utils/utils';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PrestadorService = /*#__PURE__*/(() => {\n  class PrestadorService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.BASE_URL = Utils.makeURLRequest(\"/prestadores\");\n      this.data = {};\n      // Headers\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n    }\n    read() {\n      return this.httpClient.get(this.BASE_URL).toPromise();\n    }\n    listarPrestadoresInativos() {\n      const url = `${this.BASE_URL}/prestadorInativo`;\n      return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    readByID(id) {\n      const url = `${this.BASE_URL}/${id}`;\n      return this.httpClient.get(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    create(prestador) {\n      this.data = this.parseData(prestador);\n      return this.httpClient.post(this.BASE_URL, this.data, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    update(prestador) {\n      const url = `${this.BASE_URL}/${prestador.id}`;\n      return this.httpClient.put(url, prestador, this.httpOptions).toPromise();\n    }\n    aprovarPrestador(id) {\n      const url = `${this.BASE_URL}/aprovarPrestador/${id}`;\n      return this.httpClient.put(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    delete(id) {\n      const url = `${this.BASE_URL}/${id}`;\n      console.log(url);\n      return this.httpClient.delete(url, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    parseData(prestador) {\n      let data = prestador;\n      return data;\n    }\n    // Manipulação de erros\n    handleError(error) {\n      let errorMessage = '';\n      if (error.error instanceof ErrorEvent) {\n        errorMessage = error.error.message;\n      } else {\n        errorMessage = error.message;\n      }\n      return throwError(errorMessage);\n    }\n  }\n  PrestadorService.ɵfac = function PrestadorService_Factory(t) {\n    return new (t || PrestadorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  PrestadorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PrestadorService,\n    factory: PrestadorService.ɵfac,\n    providedIn: 'root'\n  });\n  return PrestadorService;\n})();","map":null,"metadata":{},"sourceType":"module"}